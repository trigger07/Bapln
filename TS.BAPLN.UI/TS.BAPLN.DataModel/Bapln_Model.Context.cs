//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TS.BAPLN.DataModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using TS.BAPLN.DataEntities;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BAPLNEntities : DbContext
    {
        public BAPLNEntities()
            : base("name=BAPLNEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CAT_Beca> CAT_Beca { get; set; }
        public virtual DbSet<CAT_CursoLectivo> CAT_CursoLectivo { get; set; }
        public virtual DbSet<CAT_Estado> CAT_Estado { get; set; }
        public virtual DbSet<CAT_Materia> CAT_Materia { get; set; }
        public virtual DbSet<CAT_Nacionalidad> CAT_Nacionalidad { get; set; }
        public virtual DbSet<CAT_Nivel> CAT_Nivel { get; set; }
        public virtual DbSet<CAT_PeriodicidadPago> CAT_PeriodicidadPago { get; set; }
        public virtual DbSet<CAT_Periodo> CAT_Periodo { get; set; }
        public virtual DbSet<CAT_Permiso> CAT_Permiso { get; set; }
        public virtual DbSet<CAT_TipoBeca> CAT_TipoBeca { get; set; }
        public virtual DbSet<HIS_HistorialAcademico> HIS_HistorialAcademico { get; set; }
        public virtual DbSet<HIS_HistorialAportes> HIS_HistorialAportes { get; set; }
        public virtual DbSet<LIS_AporteCuota> LIS_AporteCuota { get; set; }
        public virtual DbSet<LIS_BecaEstudiante> LIS_BecaEstudiante { get; set; }
        public virtual DbSet<LIS_CuotasBeca> LIS_CuotasBeca { get; set; }
        public virtual DbSet<LIS_Donador> LIS_Donador { get; set; }
        public virtual DbSet<LIS_Estudiante> LIS_Estudiante { get; set; }
        public virtual DbSet<LIS_Instituciones> LIS_Instituciones { get; set; }
        public virtual DbSet<LIS_Usuario> LIS_Usuario { get; set; }
        public virtual DbSet<vwHistorialAcademico> vwHistorialAcademicoes { get; set; }
        public virtual DbSet<CAT_EstadoCivil> CAT_EstadoCivil { get; set; }
        public virtual DbSet<CAT_TipoResponsable> CAT_TipoResponsable { get; set; }
        public virtual DbSet<LIS_Responsable> LIS_Responsable { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int sp_CrearExpedienteAcademico(Nullable<int> idCursoLectivo, Nullable<int> idEstudiante, Nullable<int> idInstitucion, Nullable<int> idNivel)
        {
            var idCursoLectivoParameter = idCursoLectivo.HasValue ?
                new ObjectParameter("idCursoLectivo", idCursoLectivo) :
                new ObjectParameter("idCursoLectivo", typeof(int));
    
            var idEstudianteParameter = idEstudiante.HasValue ?
                new ObjectParameter("idEstudiante", idEstudiante) :
                new ObjectParameter("idEstudiante", typeof(int));
    
            var idInstitucionParameter = idInstitucion.HasValue ?
                new ObjectParameter("idInstitucion", idInstitucion) :
                new ObjectParameter("idInstitucion", typeof(int));
    
            var idNivelParameter = idNivel.HasValue ?
                new ObjectParameter("idNivel", idNivel) :
                new ObjectParameter("idNivel", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CrearExpedienteAcademico", idCursoLectivoParameter, idEstudianteParameter, idInstitucionParameter, idNivelParameter);
        }
    }
}
